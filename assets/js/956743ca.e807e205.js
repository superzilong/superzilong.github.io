"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[135],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3193:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Typescript tutorial",description:"Learn the basics of typescript"},l="Typescript tutorial",p={unversionedId:"Javascript/Typescript tutorial",id:"Javascript/Typescript tutorial",title:"Typescript tutorial",description:"Learn the basics of typescript",source:"@site/docs/Javascript/Typescript tutorial.md",sourceDirName:"Javascript",slug:"/Javascript/Typescript tutorial",permalink:"/docs/Javascript/Typescript tutorial",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Javascript/Typescript tutorial.md",tags:[],version:"current",frontMatter:{title:"Typescript tutorial",description:"Learn the basics of typescript"},sidebar:"tutorialSidebar",previous:{title:"Javascript\u4e2d\u7684this",permalink:"/docs/Javascript/Javascript\u4e2d\u7684this"}},c={},u=[{value:"Install",id:"install",level:2},{value:"Config",id:"config",level:2},{value:"Basic types",id:"basic-types",level:2},{value:"Build-in Type primitives",id:"build-in-type-primitives",level:3},{value:"Common build-in JS Objects",id:"common-build-in-js-objects",level:3},{value:"Type Literals",id:"type-literals",level:3},{value:"Union Type",id:"union-type",level:3},{value:"Intersection Types",id:"intersection-types",level:3},{value:"Interface",id:"interface",level:2},{value:"Common Syntax",id:"common-syntax",level:3},{value:"CFA(Control Flow Analysis)",id:"cfacontrol-flow-analysis",level:2},{value:"If Statements",id:"if-statements",level:3},{value:"Class",id:"class",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-tutorial"},"Typescript tutorial"),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm install typescript -g\n")),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create an empty directory and use below command to initialize.  It will generate a config file ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"tsc --init\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Modify ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," to configure the source typescript directory and the target javascript directory.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "compilerOptions": {\n    ...\n    "rootDir": "./source",     /* Specify the root folder within your    source files. */\n    "outDir": "./target",      /* Specify an output folder for all   emitted files. */\n    ...\n    }\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Create ",(0,a.kt)("inlineCode",{parentName:"li"},"index.ts")," in the source folder and add below test sentence. Run the command ",(0,a.kt)("inlineCode",{parentName:"li"},"tsc --watch"),", it will update the output ",(0,a.kt)("inlineCode",{parentName:"li"},"index.js")," file in the target folder in real time.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const v: string = "Hello world!"\nconsole.log(v);\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Use node to run the output ",(0,a.kt)("inlineCode",{parentName:"li"},"index.js")," to checkout the result.")),(0,a.kt)("h2",{id:"basic-types"},"Basic types"),(0,a.kt)("h3",{id:"build-in-type-primitives"},"Build-in Type primitives"),(0,a.kt)("p",null,"number, string, boolean, undefined, null, any, unknown, never, void, bigint, symbol"),(0,a.kt)("h3",{id:"common-build-in-js-objects"},"Common build-in JS Objects"),(0,a.kt)("p",null,"Date, Error, Array, Map, Set, Regexp, Promise"),(0,a.kt)("h3",{id:"type-literals"},"Type Literals"),(0,a.kt)("p",null,"Object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n    field1: string;\n    field2: number;\n}\n")),(0,a.kt)("p",null,"Function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"(arg: number)=>string\n")),(0,a.kt)("p",null,"Array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"string[]\n// Or\nArray<string>\n")),(0,a.kt)("p",null,"Tuple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"[string, number]\n")),(0,a.kt)("h3",{id:"union-type"},"Union Type"),(0,a.kt)("p",null,"Describes a type which is one of many options, for example a list of known strings."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'type Size = "small" | "medium" | "large";\n')),(0,a.kt)("p",null,"Discriminated Unions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type Responses = \n | { status: 200, data: any }\n | { status: 301, to: string }\n | { status: 400, error: Error };\n//Usage\nconst response = getResponse()\nswitch(response.status) {\n case 200: return response.data\n case 301: return redirect(response.to)\n case 400: return response.error\n }\n")),(0,a.kt)("h3",{id:"intersection-types"},"Intersection Types"),(0,a.kt)("p",null,"A way to merge/extend types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type Location =  { x: number } & { y: number }\n// { x: number, y: number }\n")),(0,a.kt)("h2",{id:"interface"},"Interface"),(0,a.kt)("h3",{id:"common-syntax"},"Common Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// Use extend to take properties from existing interface or type\ninterface JSONResponse extends Response, HTTPAble { \n    version: number\n    \n    /** In bytes */\n    payloadSize: number; // The comments above property are JSDoc comment attached to show in editors\n    \n    outOfStock?: boolean; // This property might not be on the object\n    \n    // Below are two ways to describe a property which is a function\n    update: (retryTimes: number) => void;\n    update(retryTimes: number): void;\n    \n    (): JSONResponse; // This is a callable object\n    \n    new(s: string): JSONResponse; // You can use new on the object.\n    \n    // Any property not described already is assumed to exist, and all properties must be numbers\n    [key: string]: number;\n    \n    readonly body: string; // Tells TypeScript that a property can not be changed\n}\n")),(0,a.kt)("h2",{id:"cfacontrol-flow-analysis"},"CFA(Control Flow Analysis)"),(0,a.kt)("h3",{id:"if-statements"},"If Statements"),(0,a.kt)("p",null,"Most narrowing comes from expressions inside if statements, where different type operators narrow inside the new scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// typeof (for primitives)\nconst input = getUserInput();\ninput; // string | number\nif (typeof input === \u201cstring\u201d) {\n input // string\n}\n\n// instance of (for classes)\nconst input = getUserInput();\ninput; // number | number[]\nif (input instanceof Array) {\n input // number[]\n}\n\n// "property" in object (for objects)\nconst input = getUserInput();\ninput; // string | {error: ...}\nif ("error" in input) {\n input // {error: ...}\n}\n\n// type-guard functions (for anything)\nconst input = getUserInput();\ninput; // number | number[]\nif (Array.isArray(input)) {\n input // number[]\n}\n')),(0,a.kt)("h2",{id:"class"},"Class"),(0,a.kt)("p",null,"TBD..."))}d.isMDXComponent=!0}}]);