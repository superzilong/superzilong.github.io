"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[283],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),d=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},p=function(e){var r=d(e.components);return t.createElement(l.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),f=o,v=u["".concat(l,".").concat(f)]||u[f]||c[f]||i;return n?t.createElement(v,a(a({ref:r},p),{},{components:n})):t.createElement(v,a({ref:r},p))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7096:function(e,r,n){n.r(r),n.d(r,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var t=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:1},l="Binary Tree Traversal",d={unversionedId:"Algorithms/Binary Tree Traversal",id:"Algorithms/Binary Tree Traversal",title:"Binary Tree Traversal",description:"1. Breadth-first",source:"@site/docs/Algorithms/Binary Tree Traversal.md",sourceDirName:"Algorithms",slug:"/Algorithms/Binary Tree Traversal",permalink:"/docs/Algorithms/Binary Tree Traversal",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Algorithms/Binary Tree Traversal.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Algorithms",permalink:"/docs/category/algorithms"}},p={},c=[{value:"1. Breadth-first",id:"1-breadth-first",level:2},{value:"1.1 Level-order",id:"11-level-order",level:4},{value:"2. Depth-first",id:"2-depth-first",level:2},{value:"2.1 Pre-order",id:"21-pre-order",level:4},{value:"2.2 In-order",id:"22-in-order",level:4},{value:"2.3 Post-order",id:"23-post-order",level:4},{value:"3. Python Code Examples",id:"3-python-code-examples",level:2}],u={toc:c};function f(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"binary-tree-traversal"},"Binary Tree Traversal"),(0,i.kt)("h2",{id:"1-breadth-first"},"1. Breadth-first"),(0,i.kt)("h4",{id:"11-level-order"},"1.1 Level-order"),(0,i.kt)("h2",{id:"2-depth-first"},"2. Depth-first"),(0,i.kt)("h4",{id:"21-pre-order"},"2.1 Pre-order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a. visit root\nb. visit left sub-tree\nc. visit right sub-tree\n")),(0,i.kt)("h4",{id:"22-in-order"},"2.2 In-order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a. visit left sub-tree\nb. visit root\nc. visit right sub-tree\n")),(0,i.kt)("h4",{id:"23-post-order"},"2.3 Post-order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"a. visit left sub-tree\nb. visit right sub-tree\nc. visit root\n")),(0,i.kt)("h2",{id:"3-python-code-examples"},"3. Python Code Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Node:\n\n    def __init__(self, val, left=None, right=None):\n        self.value = val\n        self.left = left\n        self.right = right\n\n\ndef level_order(root: Node):\n    """ Level Implementation """\n    res = []\n    if not root:\n        return res\n    level = [root]\n    while level:\n        current = []\n        new_level = []\n        for node in level:\n            current.append(node.value)\n            if node.left:\n                new_level.append(node.left)\n            if node.right:\n                new_level.append(node.right)\n        level = new_level\n        res += current\n    return res\n\n\ndef preorder(root: Node):\n    """ Preorder Implementation"""\n    res = []\n    if not root:\n        return res\n    stack = []\n    stack.append(root)\n    while stack:\n        root = stack.pop()\n        res.append(root.value)\n        if root.right:\n            stack.append(root.right)\n        if root.left:\n            stack.append(root.left)\n    return res\n\n\ndef preorder_rec(root: Node, res=None):\n    """ Preorder Recursive Implementation"""\n    if root is None:\n        return []\n    if res is None:\n        res = []\n    res.append(root.value)\n    preorder_rec(root.left, res)\n    preorder_rec(root.right, res)\n    return res\n\n\ndef inorder(root: Node):\n    """ Inorder Implementation """\n    res = []\n    if not root:\n        return res\n    stack = []\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        res.append(root.value)\n        root = root.right\n    return res\n\n\ndef inorder_rec(root: Node, res=None):\n    """ Inorder Recursive Implementation"""\n    if root is None:\n        return []\n    if res is None:\n        res = []\n    inorder_rec(root.left, res)\n    res.append(root.value)\n    inorder_rec(root.right, res)\n    return res\n\n\ndef postorder(root: Node):\n    """ Postorder Implementation"""\n    res = []\n    if not root:\n        return res\n    stack = [root]\n    while stack:\n        root = stack.pop()\n        res.append(root.value)\n        if root.left:\n            stack.append(root.left)\n        if root.right:\n            stack.append(root.right)\n    res.reverse()\n    return res\n\n\ndef postorder_rec(root: Node, res=None):\n    """ Postorder Recursive Implementation"""\n    if root is None:\n        return []\n    if res is None:\n        res = []\n    postorder_rec(root.left, res)\n    postorder_rec(root.right, res)\n    res.append(root.value)\n    return res\n\nif __name__ == \'__main__\':\n    """\n    Given binary tree [3,9,20,null,null,15,7],\n            100\n          /    \\\n        50     150\n       /  \\    /   \\\n      25  75  125   175\n    """\n    n1 = Node(100)\n    n2 = Node(50)\n    n3 = Node(150)\n    n4 = Node(25)\n    n5 = Node(75)\n    n6 = Node(125)\n    n7 = Node(175)\n    n1.left, n1.right = n2, n3\n    n2.left, n2.right = n4, n5\n    n3.left, n3.right = n6, n7\n\n    assert level_order(n1) == [100, 50, 150, 25, 75, 125, 175]\n\n    assert preorder(n1) == [100, 50, 25, 75, 150, 125, 175]\n    assert preorder_rec(n1) == [100, 50, 25, 75, 150, 125, 175]\n\n    assert inorder(n1) == [25, 50, 75, 100, 125, 150, 175]\n    assert inorder_rec(n1) == [25, 50, 75, 100, 125, 150, 175]\n\n    assert postorder(n1) == [25, 75, 50, 125, 175, 150, 100]\n    assert postorder_rec(n1) == [25, 75, 50, 125, 175, 150, 100]\n')))}f.isMDXComponent=!0}}]);